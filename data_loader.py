import numpy as np
from keras.utils.np_utils import to_categorical
import json
from scipy import signal


def load_data_internal(filePath,labelValue):
	
	train_X = np.zeros([118,200,3])
	train_Y = np.zeros([118,1])

	with open(filePath) as f:
		m=0
		while True:
			line = f.readline()
			if not line:
				break
			#train_labels_onehot = to_categorical(labelValue,5)
			#train_Y_arr.append(train_labels_onehot)
			rows = json.loads(line)
			i=0
			for r in rows:
				j=0
				for c in r:
					value = float(c)
					train_X[m][i][j]=value
					j = j+1
				i = i+1
			train_Y[m] = labelValue
			m=m+1

		train_Y = to_categorical(train_Y,5)
		return train_X,train_Y

def load_data():
	X1,Y1 = load_data_internal('./data/accdata/吃饭.txt',0,)
	X2,Y2 = load_data_internal('./data/accdata/睡觉.txt',1,)
	X3,Y3 = load_data_internal('./data/accdata/打豆豆.txt',2,)
	X4,Y4 = load_data_internal('./data/accdata/看电影.txt',3)
	X5,Y5 = load_data_internal('./data/accdata/买手机.txt',4)

	train_X = np.concatenate((X1[0:100],X2[0:100]),axis=0) 
	train_X = np.concatenate((train_X,X3[0:100]),axis=0) 
	train_X = np.concatenate((train_X,X4[0:100]),axis=0) 
	train_X = np.concatenate((train_X,X5[0:100]),axis=0) 

	train_Y = np.concatenate((Y1[0:100],Y2[0:100]),axis=0) 
	train_Y = np.concatenate((train_Y,Y3[0:100]),axis=0) 
	train_Y = np.concatenate((train_Y,Y4[0:100]),axis=0) 
	train_Y = np.concatenate((train_Y,Y5[0:100]),axis=0) 




	test_X = np.concatenate((X1[100:118],X2[100:118]),axis=0) 
	test_X = np.concatenate((test_X,X3[100:118]),axis=0) 
	test_X = np.concatenate((test_X,X4[100:118]),axis=0) 
	test_X = np.concatenate((test_X,X5[100:118]),axis=0) 


	test_Y = np.concatenate((Y1[100:118],Y2[100:118]),axis=0) 
	test_Y = np.concatenate((test_Y,Y3[100:118]),axis=0) 
	test_Y = np.concatenate((test_Y,Y4[100:118]),axis=0) 
	test_Y = np.concatenate((test_Y,Y5[100:118]),axis=0) 




	print(train_X.shape)
	print(train_Y.shape)
	print(test_X.shape)
	print(test_Y.shape)

	b, a = signal.butter(8, [0.2,0.99], 'bandpass')   #配置滤波器 8 表示滤波器的阶数

	train_X = signal.filtfilt(b, a, train_X,padlen=1)  #data为要过滤的信号
	test_X = signal.filtfilt(b, a, test_X,padlen=1)  #data为要过滤的信号

	return train_X, train_Y ,test_X, test_Y

def load_axis_z():
	X1 = [[0.06357084,-0.020733787,9.822414], [0.071634516,-0.018215086,9.833887], [0.067018494,-0.023578098,9.825804], [0.06805279,-0.007029376,9.825277], [0.06514144,-0.015571888,9.822557], [0.053764194,-0.0045681368,9.844737], [0.059222974,0.0071730283,9.825929], [0.07569508,0.010084378,9.811765], [0.078884155,-0.0012258312,9.816888], [0.06968085,-0.0079583265,9.8333025], [0.07776367,-0.0048745945,9.824531], [0.059960388,-0.031986535,9.819771], [0.067430295,-0.019479224,9.821877], [0.05890694,-5.554548E-4,9.83359], [0.06172252,-0.02414313,9.821973], [0.060573302,-0.0073262574,9.823592], [0.06758352,-0.005554548,9.831473], [0.056484006,-0.0048745945,9.838091], [0.074248984,-0.007354988,9.829654], [0.07387549,-0.019488802,9.836271], [0.0634655,-0.0020685901,9.818649], [0.06603208,-0.0030358476,9.813987], [0.073492415,-0.005803545,9.822078], [0.06741114,-0.015351621,9.82158], [0.061176643,-0.015619772,9.820546], [0.07637503,-0.015658079,9.822453], [0.072640084,-0.0076135616,9.82338], [0.08048348,-9.576807E-5,9.833198], [0.07026503,9.3852705E-4,9.833512], [0.06849332,-0.0037732618,9.825727], [0.06199067,-0.02006341,9.8243], [0.066290654,-0.01616565,9.827394], [0.07991845,-0.010390836,9.8367405], [0.06460514,0.004367024,9.8384075], [0.05791095,-0.01097502,9.827346], [0.061454367,-0.012516887,9.825736], [0.063168615,-0.0127658835,9.819147], [0.063963495,-0.01367568,9.823132], [0.06687484,0.0029496565,9.832976], [0.06966169,-0.004098873,9.828303], [0.06277597,-0.015131354,9.823592], [0.059893347,-0.014068329,9.815815], [0.06361873,-0.0128999585,9.81479], [0.06298666,-0.018013973,9.821858], [0.07360734,-0.015227123,9.822586], [0.06554367,-0.014010868,9.819723], [0.061971515,-0.0061770407,9.824607], [0.072506,-0.00566947,9.821781], [0.07069599,-0.008370129,9.822453], [0.06211517,-0.013024457,9.820422], [0.070992865,-0.008446744,9.816868], [0.054233454,-0.017535133,9.828427], [0.06860825,-0.0139151,9.821628], [0.059960388,-0.0058322754,9.808603], [0.05571786,-0.0113102095,9.827106], [0.06922116,-0.019421764,9.816361], [0.0649116,-0.013570336,9.812013], [0.061052144,-0.016587028,9.813851], [0.06536171,-0.013819332,9.811755], [0.06729622,-0.023807941,9.826034], [0.05274905,-0.005707777,9.819541], [0.061770406,-0.017745823,9.813383], [0.07171113,-0.005564125,9.819253], [0.07280289,-0.01622311,9.807522], [0.056886233,-0.015993267,9.811995], [0.05476018,-0.017209522,9.808834], [0.05861006,-0.0135320285,9.81436], [0.069699995,0.005995081,9.816772], [0.06359,-0.0068186866,9.805501], [0.07171113,-0.004252102,9.803279], [0.05717354,-0.018895041,9.807608], [0.056378663,-0.016366763,9.814485], [0.06616616,-0.0038881835,9.8060465], [0.07237192,-0.006856994,9.810864], [0.05190629,-0.008714894,9.816772], [0.06159802,-0.013244724,9.812223], [0.061942786,-0.007872135,9.804888], [0.06273766,-0.009720459,9.80532], [0.061176643,-0.0051523224,9.812961], [0.058475982,-0.004941632,9.802887], [0.066673726,-0.0022505496,9.817635], [0.064499795,-0.018425776,9.822883], [0.058054604,-0.006636727,9.819387], [0.070657685,-8.714894E-4,9.808728], [0.079525806,-0.0070102224,9.804036], [0.064116724,-0.0056311623,9.813919], [0.05787264,-0.012890382,9.815011], [0.06075526,-0.0028155812,9.809178], [0.065696895,-0.012880805,9.805194], [0.05958689,-0.019431341,9.789928], [0.065505356,-0.017171215,9.825593], [0.052634127,-0.019785684,9.795149], [0.065725625,-0.014997279,9.821551], [0.066223614,-0.0074507557,9.833915], [0.05287355,-0.020226216,9.805472], [0.05670427,-0.01892377,9.830995], [0.0625174,-0.034352005,9.75912], [0.065754354,-0.021423317,9.855233], [0.07722737,-0.032360032,9.734431], [0.060908493,-0.014882358,9.845168], [0.075254545,0.004759673,9.781261], [0.08148905,-0.03548207,9.790763], [0.052940585,-0.017199945,9.836942], [0.070389524,-0.025780763,9.721521], [0.047070004,-0.011884817,9.815997], [0.06419334,-0.014997279,9.787909], [0.07735187,-0.020350713,9.77089], [0.054290917,-0.020848708,9.798844], [0.075513124,-0.010601525,9.722404], [0.044407655,-0.001235408,9.872031], [0.0646626,-0.006847417,9.816926], [0.06695145,-0.026393678,9.802628], [0.06060203,-0.02536896,9.772307], [0.053065088,-0.020638019,9.819838], [0.05143703,-0.0038019924,9.834174], [0.06352296,-0.013110648,9.78106], [0.04550899,-0.012612655,9.762071], [0.048324566,-0.020800825,9.807224], [0.072132505,-0.01298615,9.819798], [0.059874196,-0.012334928,9.75914], [0.047548845,-0.005947197,9.771427], [0.0618949,-0.013302185,9.793607], [0.052461747,-2.2026655E-4,9.785983], [0.056062628,-0.013254301,9.78992], [0.05497087,-0.0069623385,9.791068], [0.06433699,-0.010477027,9.789508], [0.0613586,-0.00983538,9.788799], [0.0568575,-0.008341399,9.783829], [0.058016296,-0.0113580935,9.786615], [0.06447106,-0.018674774,9.784116], [0.06246951,-0.0047884034,9.785955], [0.06422207,-0.007565677,9.792477], [0.04705085,-0.013024457,9.808058], [0.066194884,-0.0076231384,9.787104], [0.06040092,-0.034869153,9.811122], [0.046821006,-0.006215348,9.794105], [0.066989765,-0.03621948,9.819119], [0.047271118,-0.04621767,9.807091], [0.050804958,-0.017027562,9.726953], [0.0640018,-0.034715924,9.700941], [0.07336792,-0.019594146,9.687227], [0.03847961,-0.03310702,9.779289], [0.055162407,-0.0051810527,9.770516], [0.050287813,-0.007565677,9.801641], [0.07849151,-0.008944738,9.727622], [0.064528525,-0.01733402,9.784728], [0.06895301,-0.014690822,9.747188]]
	b, a = signal.butter(8, [0.3,0.99], 'bandpass')   #配置滤波器 8 表示滤波器的阶数

	X1 = signal.filtfilt(b, a, X1,padlen=1)  #data为要过滤的信号
	data = []
	for i in X1:
		print (i[2])
		data.append(i[2])
	return np.array(data)
#load_data()

#load_data_internal('./data/eat_tts.txt',0,0,120)